# Import required libraries
import os
import threading
import subprocess
import requests
from flask import Flask, request, jsonify
from flask_cors import CORS
from pyngrok import ngrok

# Flask app setup
app = Flask(__name__)
CORS(app)

# Ngrok setup
public_url = ngrok.connect(5000)
print(f"Public URL for testing endpoints: {public_url}")

# Dummy Ollama generator simulation for testing
@app.route('/generate', methods=['POST'])
def generate_response():
    # Get user input from Postman
    data = request.json
    user_input = data.get('input', '')  # Example: {"input": "Test case data"}

    # Simulate Ollama's output
    ollama_output = f"Ollama's response to: {user_input}"
    return jsonify({'output': ollama_output})  # Response JSON

# Endpoint to send data to Spring Boot
@app.route('/send_to_spring', methods=['POST'])
def send_to_spring():
    # Capture Ollama output
    data = request.json  # Expect JSON with the Ollama output
    ollama_output = data.get("output", "")  # Extract the "output" field

    # Spring Boot endpoint
    spring_url = "http://localhost:8080/api/ml/generate"  # Update with actual endpoint
    spring_payload = {
        "ollama_data": ollama_output  # Key must match the expected field in Spring Boot
    }

    # Send POST request to Spring Boot
    try:
        response = requests.post(spring_url, json=spring_payload)
        return jsonify({"message": "Data sent successfully", "spring_response": response.json()})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Start Flask server
thread = threading.Thread(target=app.run, kwargs={'host': '0.0.0.0', 'port': 5000})
thread.start()
